#include "wled.h"
//1: 94:B5:55:F9:ED:80
//2: 94:B5:55:F9:F6:00
//#define ESP1

#ifndef ESP1
#define ESP2
#endif


#include <NoDelay.h>
#include <esp_now.h>
#include "esp_wifi.h"

//#define ESPMini
//mini: 94:B5:55:F9:F6:00
//esp32: F0:08:D1:D1:A6:64

// REPLACE WITH YOUR RECEIVER MAC Address
#ifndef ESPMini
//uint8_t broadcastAddress[] = { 0x94, 0xB5, 0x55, 0xF9, 0xF6, 0x00 };  //1 mini: 94:B5:55:F9:F6:00
uint8_t broadcastAddress[] = { 0xC8, 0xC9, 0xA3, 0x54, 0xEB, 0x13 };  //1 esp8266: C8:C9:A3:54:EB:13
#else
uint8_t broadcastAddress[] = { 0xF0, 0x08, 0xD1, 0xD1, 0xA6, 0x64 };  //2 //esp32: F0:08:D1:D1:A6:64
#endif

noDelay LEDtime(500);   //Creats a noDelay varible set to 500ms
noDelay sendTime(100);  //Creats a noDelay varible set to 1000ms
int LEDpin = 2;
//int ledState = LOW;

// Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
  char a[32];
  int b;
  float c;
  bool d;
} struct_message;

// Create a struct_message called myData
struct_message myDataOut;
struct_message myDataIn;

// callback function that will be executed when data is received
void OnDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len) {
  memcpy(&myDataIn, incomingData, sizeof(myDataIn));
  Serial.print("Bytes received: ");
  Serial.println(len);
  Serial.print("Char: ");
  Serial.println(myDataIn.a);
  Serial.print("Int: ");
  Serial.println(myDataIn.b);
  Serial.print("Float: ");
  Serial.println(myDataIn.c);
  Serial.print("Bool: ");
  Serial.println(myDataIn.d);
  Serial.println();
  if (myDataIn.d == 0) {
    digitalWrite(2, HIGH);
  } else {
    digitalWrite(2, LOW);
  }
}

esp_now_peer_info_t peerInfo;

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}


constexpr char WIFI_SSID[] = "DAIRY2 8874";
int32_t channel;
int32_t getWiFiChannel(const char *ssid) {
  if (int32_t n = WiFi.scanNetworks()) {
    for (uint8_t i = 0; i < n; i++) {
      if (!strcmp(ssid, WiFi.SSID(i).c_str())) {
        return WiFi.channel(i);
      }
    }
  }
  return 0;
}

//gets called once at boot. Do all initialization that doesn't depend on network here
void userSetup()
{
pinMode(2, OUTPUT);
  Serial.println(WiFi.macAddress());

  // #ifdef ESP1
  //   esp_wifi_set_mac(WIFI_IF_STA, &broadcastAddress1[0]);
  // #else
  //   esp_wifi_set_mac(WIFI_IF_STA, &broadcastAddress2[0]);
  // #endif
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_AP_STA);
  Serial.println(WiFi.macAddress());
   
channel = getWiFiChannel(WIFI_SSID);

 WiFi.printDiag(Serial);  // Uncomment to verify channel number before
  esp_wifi_set_promiscuous(true);
  esp_wifi_set_channel(channel, WIFI_SECOND_CHAN_NONE);
  esp_wifi_set_promiscuous(false);
  WiFi.printDiag(Serial);  // Uncomment to verify channel change after
  
  // ESP_ERROR_CHECK(
  //   esp_wifi_set_protocol(
  //     ESP_IF_WIFI_STA,
  //     WIFI_PROTOCOL_LR));
  // Init ESP-NOW
  
}

//gets called every time WiFi is (re-)connected. Initialize own network interfaces here
void userConnected()
{
if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);

  // Register peer


  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = channel;
  peerInfo.encrypt = false;

  // Add peer
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
  // Register for a callback function that will be called when data is received
  esp_now_register_recv_cb(OnDataRecv);
}

//loop. You can use "if (WLED_CONNECTED)" to check for successful connection
void userLoop()
{
 if (sendTime.update())  //Checks to see if set time has past
  {

    // Set values to send
    strcpy(myDataOut.a, "THIS IS A CHAR");
    myDataOut.b = random(1, 20);
    myDataOut.c = 1.2;
    if (myDataOut.d == false) myDataOut.d = true;
    else myDataOut.d = false;

    // Send message via ESP-NOW
    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myDataOut, sizeof(myDataOut));


    if (result == ESP_OK) {
      Serial.println("Sent with success");
    } else {
      Serial.println("Error sending the data");
    }
  }
}